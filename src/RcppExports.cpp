// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// IsingSamplerCpp
IntegerMatrix IsingSamplerCpp(int n, NumericMatrix graph, NumericVector thresholds, double beta, int nIter, IntegerVector responses, bool exact);
RcppExport SEXP IsingSampler_IsingSamplerCpp(SEXP nSEXP, SEXP graphSEXP, SEXP thresholdsSEXP, SEXP betaSEXP, SEXP nIterSEXP, SEXP responsesSEXP, SEXP exactSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        int n = Rcpp::as<int >(nSEXP);
        NumericMatrix graph = Rcpp::as<NumericMatrix >(graphSEXP);
        NumericVector thresholds = Rcpp::as<NumericVector >(thresholdsSEXP);
        double beta = Rcpp::as<double >(betaSEXP);
        int nIter = Rcpp::as<int >(nIterSEXP);
        IntegerVector responses = Rcpp::as<IntegerVector >(responsesSEXP);
        bool exact = Rcpp::as<bool >(exactSEXP);
        IntegerMatrix __result = IsingSamplerCpp(n, graph, thresholds, beta, nIter, responses, exact);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// H
double H(NumericMatrix J, IntegerVector s, NumericVector h);
RcppExport SEXP IsingSampler_H(SEXP JSEXP, SEXP sSEXP, SEXP hSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        NumericMatrix J = Rcpp::as<NumericMatrix >(JSEXP);
        IntegerVector s = Rcpp::as<IntegerVector >(sSEXP);
        NumericVector h = Rcpp::as<NumericVector >(hSEXP);
        double __result = H(J, s, h);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
